version: '3.3'

services:
  db:
    image: postgres:15.3-alpine
    container_name: db
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    expose:
      - 5432
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    networks:
      - my_network

  redis:
    image: redis:7.2.0-alpine
    restart: unless-stopped
    expose:
      - 6379
    networks:
      - my_network

  backend:
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    entrypoint: /app/docker/backend/django-entrypoint.sh
    restart: unless-stopped
    depends_on:
      - db
    expose:
      - 8000
    ports:
      - "8000:8000"
    volumes:
      - static_value:/app/backend/static/
      - media_value:/app/backend/media/
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
    links:
      - "db:db"
    networks:
      - my_network

  nginx:
    image: nginx:1.25.0-alpine
    depends_on:
      - db
    ports:
      - "80:80"
    restart: always
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_value:/app/backend/static/
      - media_value:/app/backend/media/
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    env_file:
    - .env
    networks:
      - my_network

  celeryworker:
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    entrypoint: /app/docker/backend/celeryworker-entrypoint.sh
    restart: unless-stopped
    volumes:
      - static_value:/app/backend/static/
      - media_value:/app/backend/media/
    depends_on:
      - backend
      - redis
      - db
    links:
      - db:db
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    networks:
      - my_network

  celerybeat:
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    entrypoint: /app/docker/backend/celerybeat-entrypoint.sh
    restart: always
    volumes:
      - static_value:/app/backend/static/
      - media_value:/app/backend/media/
    depends_on:
      - backend
      - redis
      - db
    links:
      - db:db
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    networks:
      - my_network


volumes:
  postgres_data:
  static_value:
  media_value:

networks:
  my_network:
    driver: bridge
